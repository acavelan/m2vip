Notes: 

- On test des matrices de taille 256, 512, 1024, 2048, 4096
- Pour N > 1024 le cache est trop petit et on observe de grosses différences

Machines:
- OrdiCentre Intel Celeron (x2)
- Asus Intel Core i7 (x4 + 4)

Benchs
================================================================================

naive                   - triple boucle ligne / colonnes
cache                   - ligne / ligne
cache-unroll-1-4
cache-unroll-1-8    
cache-unroll-1-16   
cache-unroll-2-4 
cache-unroll-2-8 
cache-unroll-2-16
cache-unroll-1-4-sse
cache-unroll-1-8-sse
cache-unroll-1-16-sse
cache-unroll-2-4-sse
cache-unroll-2-8-sse
cache-unroll-2-16-sse
cache-unroll-4-4-sse
cache-unroll-4-8-sse
blocks                  - optimisation du cache par blocs (bloc = taille du cache)

Recherche du bloc optimal pour la machine X
===========================================

vitesse blocks-unroll-4-8-sse pour 32 64 80 96 128 256 512

blocks-unroll-1-4
blocks-unroll-1-8    
blocks-unroll-1-16   
blocks-unroll-2-4 
blocks-unroll-2-8 
blocks-unroll-2-16
blocks-unroll-1-4-sse
blocks-unroll-1-8-sse
blocks-unroll-1-16-sse
blocks-unroll-2-4-sse
blocks-unroll-2-8-sse
blocks-unroll-2-16-sse
blocks-unroll-4-4-sse
blocks-unroll-4-8-sse

=> Résultats dans stats/

=> perf stat donne des résultats très divergeant suivant le déroulement.

4_4 semble être le meilleurs compromis.

Asus core i7 blocks-unroll-4-4-sse
Performance counter stats for 'bin/blocks_unroll_sse_4_4 2048':					bin/blocks_unroll_sse_4_8

       1576.113617 task-clock (msec)         #    0.997 CPUs utilized           <- 0.999
               101 context-switches          #    0.064 K/sec                  
                 1 cpu-migrations            #    0.001 K/sec                  
             1,854 page-faults               #    0.001 M/sec                  
     4,404,106,472 cycles                    #    2.794 GHz                    	<- 2.844
     1,975,356,900 stalled-cycles-frontend   #   44.85% frontend cycles idle    <- 70%
       334,104,618 stalled-cycles-backend    #    7.59% backend  cycles idle    <- 5.87
     7,606,013,934 instructions              #    1.73  insns per cycle         <- 1.70
                                             #    0.26  stalled cycles per insn <- 0.33
       685,399,974 branches                  #  434.867 M/sec                   <- 275.000
         4,524,338 branch-misses             #    0.66% of all branches         <- 1.08

       1.580535382 seconds time elapsed

Le gain est léger à cause de la réduction du nombre de branch, 
mais les perf brutes de calcul et de mémoire son moins bonnes !

Graphe sur différentes tailles de matrices
==========================================

Comparaisons des graphes
Comparaisons des meilleurs algos sur différentes tailles de matrices


				Proc	256, 	512, 	1024, 	2048, 	4096
naif			celeron 55,		630,	10600	
best-cache		celeron 4,		38, 	485,	3915,	32400
best-blocks		celeron 4,		37, 	440, 	2750, 	34300
naïf-omp-2		celeron 32, 	82,		7600, 	60900
cache-omp-2		celeron 2, 		22, 	330, 	3200, 	29200
blocks-omp-2	celeron 15,		28, 	222, 	1560,	24900

naif			i7
best-cache		i7
best-blocks		i7
naïf-omp-2		i7
naïf-omp-4		i7
naïf-omp-8		i7
cache-omp-2		i7
cache-omp-4		i7
cache-omp-8		i7
blocks-omp-2	i7
blocks-omp-4	i7
blocks-omp-8	i7


Experimentations
================================================================================

Hugepages
CUDA


Comparaisons
================================================================================
			Proc	256, 	512, 	1024, 	2048, 	4096
- CBLAS		i7
- Eigen		i7
- Matlab	i7

- CBLAS		celeron 23, 	183, 	1584, 	12500	100434
- Eigen		celeron 4, 		23, 	176, 	1385, 	10926
- Matlab	celeron 26,		250,	2094,	14000,	115700
