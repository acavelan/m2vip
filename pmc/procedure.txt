Notes: 

- On test des matrices de taille 256, 512, 1024, 2048, 4096
- Pour N > 1024 le cache est trop petit et on observe de grosses différences

Machines:
- OrdiCentre Intel Celeron (x2)
- Asus Intel Core i7 (x4 + 4)

Benchs
================================================================================

naive                   - triple boucle ligne / colonnes
cache                   - ligne / ligne
cache-unroll-1-4
cache-unroll-1-8    
cache-unroll-1-16   
cache-unroll-2-4 
cache-unroll-2-8 
cache-unroll-2-16
cache-unroll-1-4-sse
cache-unroll-1-8-sse
cache-unroll-1-16-sse
cache-unroll-2-4-sse
cache-unroll-2-8-sse
cache-unroll-2-16-sse
cache-unroll-4-4-sse
cache-unroll-4-8-sse
blocks                  - optimisation du cache par blocs (bloc = taille du cache)

Recherche du bloc optimal pour la machine X
===========================================

blocks-unroll-1-4
blocks-unroll-1-8    
blocks-unroll-1-16   
blocks-unroll-2-4 
blocks-unroll-2-8 
blocks-unroll-2-16
blocks-unroll-1-4-sse
blocks-unroll-1-8-sse
blocks-unroll-1-16-sse
blocks-unroll-2-4-sse
blocks-unroll-2-8-sse
blocks-unroll-2-16-sse
blocks-unroll-4-4-sse
blocks-unroll-4-8-sse

=> Résultats dans stats/

=> perf stat donne des résultats très divergeant suivant le déroulement.

4_4 semble être le meilleurs compromis.

Asus core i7 blocks-unroll-4-4-sse
Performance counter stats for 'bin/blocks_unroll_sse_4_4 2048':

       1576.113617 task-clock (msec)         #    0.997 CPUs utilized          
               101 context-switches          #    0.064 K/sec                  
                 1 cpu-migrations            #    0.001 K/sec                  
             1,854 page-faults               #    0.001 M/sec                  
     4,404,106,472 cycles                    #    2.794 GHz                    
     1,975,356,900 stalled-cycles-frontend   #   44.85% frontend cycles idle   <- 70%
       334,104,618 stalled-cycles-backend    #    7.59% backend  cycles idle   
     7,606,013,934 instructions              #    1.73  insns per cycle        <- 1.70
                                             #    0.26  stalled cycles per insn
       685,399,974 branches                  #  434.867 M/sec                  <- 215.000
         4,524,338 branch-misses             #    0.66% of all branches        

       1.580535382 seconds time elapsed

Recherche des meilleurs implémentations et parallélisation
==========================================================

naïf-omp-2		42500, i7
naïf-omp-4		34100, i7
naïf-omp-8		35000, i7

cache-omp-2		1170, i7
cache-omp-4		625, i7
cache-omp-8		460, i7

blocks-omp-2	835, i7
blocks-omp-4	465, i7
blocks-omp-8	400, i7


Experimentations
================================================================================

Hugepages
CUDA


Comparaisons
================================================================================

- CBLAS		7700, i7
- Eigen		890, i7
- Matlab	9300, i7
- Python
- Java
- D
